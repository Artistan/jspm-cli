#!/usr/bin/env node
/*
 *   Copyright 2014-2019 Guy Bedford (http://guybedford.com)
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
const path = require('path');
const fs = require('fs');
const { getJspmProjectPath } = require('../lib/utils/common');

// respect any -p / --project flag
// the first project only gets to determine the jspm version
const args = process.argv.slice(2);
let cwdArgIndex = args.indexOf('-p');
if (cwdArgIndex === -1)
  cwdArgIndex = args.indexOf('--project');
if (cwdArgIndex !== -1)
  process.chdir(args[cwdArgIndex + 1]);

// lookup the jspm project path
const projectPath = getJspmProjectPath(process.cwd() + path.sep);
process.env.jspmConfigPath = projectPath ? projectPath + path.sep + 'package.json' : '';

// check if we are using the local binary
const curJspmPath = path.resolve(__dirname, '..');
const usingLocalBinary = projectPath && curJspmPath.startsWith(projectPath) && curJspmPath.slice(projectPath.length + 1).split(path.sep).length <= 4;

const tryLocalBinary = projectPath && !usingLocalBinary && path.join(projectPath, 'jspm_packages', '.bin', 'jspm' + (process.platform === 'win32' ? '.cmd' : ''));

// we should use a different binary
if (tryLocalBinary && fs.existsSync(tryLocalBinary)) {
  const ps = require('child_process').spawn(tryLocalBinary, args, { stdio: 'inherit' });
  ps.on('exit', code => process.exit(code));
  ps.on('error', err => {
    console.error(err);
    process.exit(1);
  });
}
// current jspm
else {
  process.env.globalJspm = usingLocalBinary ? '0' : '1';
  require('../lib/cli');
}
